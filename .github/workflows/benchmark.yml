name: Benchmark

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  benchmark:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        targets: ${{ matrix.target }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --target ${{ matrix.target }}
      env:
        CARGO_BUILD_TARGET: ${{ matrix.target }}

    - name: Verify and package benchmark results
      shell: bash
      run: |
        echo "Checking for criterion output..."
        if [ -d "target/criterion" ]; then
          echo "Found criterion directory with the following structure:"
          find target/criterion -type f -name "index.html" | head -20

          # Create properly structured artifact directory
          mkdir -p benchmark-results
          cp -r target/criterion/* benchmark-results/

          # Create metadata file
          echo "{
            \"platform\": \"${{ matrix.os }}\",
            \"arch\": \"${{ matrix.arch }}\",
            \"target\": \"${{ matrix.target }}\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
          }" > benchmark-results/metadata.json

          echo "Packaged $(find benchmark-results -type f -name "*.html" | wc -l) HTML files"
        else
          echo "ERROR: No criterion directory found!"
          echo "Creating empty results with error message..."
          mkdir -p benchmark-results
          echo "{\"error\": \"No benchmark results generated\"}" > benchmark-results/metadata.json
        fi

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-${{ matrix.os }}-${{ matrix.arch }}
        path: benchmark-results/
        retention-days: 30

  generate-report:
    needs: benchmark
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: benchmark-artifacts/

    - name: Generate consolidated report
      run: |
        python3 << 'EOF'
        import os
        import json
        import shutil
        from pathlib import Path
        from datetime import datetime

        # Configuration
        ARTIFACTS_DIR = Path("benchmark-artifacts")
        PUBLIC_DIR = Path("public")

        # Create output directory
        PUBLIC_DIR.mkdir(exist_ok=True)

        # Process each platform's results
        platforms = []
        for artifact_dir in ARTIFACTS_DIR.iterdir():
            if not artifact_dir.is_dir():
                continue

            platform_name = artifact_dir.name.replace("benchmark-", "")
            platform_info = {
                "name": platform_name,
                "reports": [],
                "metadata": {},
                "status": "success"
            }

            # Read metadata if available
            metadata_file = artifact_dir / "metadata.json"
            if metadata_file.exists():
                try:
                    with open(metadata_file) as f:
                        platform_info["metadata"] = json.load(f)
                        if "error" in platform_info["metadata"]:
                            platform_info["status"] = "error"
                except Exception as e:
                    print(f"Warning: Could not read metadata for {platform_name}: {e}")

            # Copy all benchmark results to public directory
            platform_public_dir = PUBLIC_DIR / platform_name
            if artifact_dir.exists():
                # Copy everything except metadata.json
                for item in artifact_dir.iterdir():
                    if item.name != "metadata.json":
                        if item.is_dir():
                            shutil.copytree(item, platform_public_dir / item.name, dirs_exist_ok=True)
                        else:
                            platform_public_dir.mkdir(parents=True, exist_ok=True)
                            shutil.copy2(item, platform_public_dir / item.name)

            # Find all HTML reports
            if platform_public_dir.exists():
                # Check for main criterion report
                main_report = platform_public_dir / "report" / "index.html"
                if main_report.exists():
                    platform_info["reports"].append({
                        "name": "Summary Report",
                        "path": f"{platform_name}/report/index.html",
                        "type": "main"
                    })

                # Find all benchmark group reports
                for report_file in platform_public_dir.rglob("*/report/index.html"):
                    # Skip the main report we already added
                    if report_file == main_report:
                        continue

                    # Build a descriptive name from the path
                    rel_path = report_file.relative_to(platform_public_dir)
                    parts = rel_path.parts[:-2]  # Remove 'report/index.html'

                    if parts:
                        bench_name = " / ".join(parts)
                        platform_info["reports"].append({
                            "name": bench_name,
                            "path": str(report_file.relative_to(PUBLIC_DIR)),
                            "type": "benchmark"
                        })

            platforms.append(platform_info)

        # Generate main index.html
        html_content = f"""<!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>argmin-simd Benchmark Results</title>
            <style>
                :root {{
                    --primary: #0969da;
                    --primary-dark: #0860ca;
                    --bg: #f6f8fa;
                    --bg-white: white;
                    --border: #d1d5da;
                    --text: #24292e;
                    --text-muted: #586069;
                    --success: #28a745;
                    --error: #dc3545;
                }}

                * {{
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }}

                body {{
                    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
                    line-height: 1.6;
                    background: var(--bg);
                    color: var(--text);
                    padding: 20px;
                }}

                .container {{
                    max-width: 1400px;
                    margin: 0 auto;
                }}

                header {{
                    background: var(--bg-white);
                    padding: 30px;
                    border-radius: 8px;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.12);
                    margin-bottom: 30px;
                }}

                h1 {{
                    font-size: 2.5em;
                    margin-bottom: 10px;
                    display: flex;
                    align-items: center;
                    gap: 15px;
                }}

                .subtitle {{
                    color: var(--text-muted);
                    font-size: 1.1em;
                }}

                .info-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                    margin: 30px 0;
                    padding: 20px;
                    background: #f0f9ff;
                    border: 1px solid var(--primary);
                    border-radius: 8px;
                }}

                .info-item {{
                    display: flex;
                    flex-direction: column;
                }}

                .info-label {{
                    font-weight: 600;
                    color: var(--text-muted);
                    font-size: 0.9em;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }}

                .info-value {{
                    font-size: 1.1em;
                    margin-top: 5px;
                }}

                .platforms {{
                    display: grid;
                    grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
                    gap: 20px;
                    margin: 30px 0;
                }}

                .platform-card {{
                    background: var(--bg-white);
                    border: 1px solid var(--border);
                    border-radius: 8px;
                    padding: 20px;
                    transition: box-shadow 0.2s;
                }}

                .platform-card:hover {{
                    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                }}

                .platform-header {{
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 15px;
                    padding-bottom: 15px;
                    border-bottom: 1px solid var(--border);
                }}

                .platform-name {{
                    font-size: 1.3em;
                    font-weight: 600;
                    color: var(--primary);
                }}

                .status-badge {{
                    padding: 4px 12px;
                    border-radius: 20px;
                    font-size: 0.85em;
                    font-weight: 600;
                }}

                .status-success {{
                    background: #d4edda;
                    color: var(--success);
                }}

                .status-error {{
                    background: #f8d7da;
                    color: var(--error);
                }}

                .report-list {{
                    display: flex;
                    flex-direction: column;
                    gap: 8px;
                }}

                .report-link {{
                    display: inline-flex;
                    align-items: center;
                    padding: 10px 16px;
                    background: var(--primary);
                    color: white;
                    text-decoration: none;
                    border-radius: 6px;
                    transition: background 0.2s;
                    font-weight: 500;
                }}

                .report-link:hover {{
                    background: var(--primary-dark);
                }}

                .report-link.main-report {{
                    background: var(--success);
                }}

                .report-link.main-report:hover {{
                    background: #218838;
                }}

                .no-reports {{
                    color: var(--text-muted);
                    font-style: italic;
                    padding: 20px;
                    text-align: center;
                    background: var(--bg);
                    border-radius: 6px;
                }}

                .timestamp {{
                    color: var(--text-muted);
                    font-size: 0.9em;
                    margin-top: 10px;
                }}

                footer {{
                    margin-top: 50px;
                    padding: 30px;
                    background: var(--bg-white);
                    border-radius: 8px;
                    text-align: center;
                    color: var(--text-muted);
                }}

                footer a {{
                    color: var(--primary);
                    text-decoration: none;
                }}

                footer a:hover {{
                    text-decoration: underline;
                }}

                .icon {{
                    width: 24px;
                    height: 24px;
                    vertical-align: middle;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <header>
                    <h1>
                        <svg class="icon" style="width: 40px; height: 40px;" viewBox="0 0 24 24" fill="none" stroke="var(--primary)" stroke-width="2">
                            <polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>
                        </svg>
                        argmin-simd Benchmark Results
                    </h1>
                    <p class="subtitle">High-performance SIMD-optimized array minimum finding</p>

                    <div class="info-grid">
                        <div class="info-item">
                            <span class="info-label">Implementation Variants</span>
                            <span class="info-value">Scalar, SIMD (2/4/8/16 lanes), Parallel</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Test Sizes</span>
                            <span class="info-value">1K to 40M elements</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Platforms Tested</span>
                            <span class="info-value">{len(platforms)} architectures</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Generated</span>
                            <span class="info-value">{datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}</span>
                        </div>
                    </div>
                </header>

                <div class="platforms">
        """

        # Generate platform cards
        for platform in sorted(platforms, key=lambda p: p["name"]):
            status_class = "status-success" if platform["status"] == "success" else "status-error"
            status_text = "Ready" if platform["status"] == "success" else "Error"

            html_content += f"""
                    <div class="platform-card">
                        <div class="platform-header">
                            <div class="platform-name">{platform['name'].replace('-', ' ').title()}</div>
                            <span class="status-badge {status_class}">{status_text}</span>
                        </div>
            """

            if platform["reports"]:
                html_content += '<div class="report-list">'

                # Show main report first if it exists
                main_reports = [r for r in platform["reports"] if r["type"] == "main"]
                for report in main_reports:
                    html_content += f'''
                        <a href="{report['path']}" class="report-link main-report">
                            <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: 8px;">
                                <path d="M9 11l3 3L22 4"></path>
                                <path d="M21 12v7a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h11"></path>
                            </svg>
                            {report['name']}
                        </a>
                    '''

                # Show other reports
                bench_reports = sorted([r for r in platform["reports"] if r["type"] == "benchmark"],
                                      key=lambda r: r["name"])
                for report in bench_reports[:5]:  # Limit to first 5 to avoid clutter
                    html_content += f'''
                        <a href="{report['path']}" class="report-link">
                            {report['name']}
                        </a>
                    '''

                if len(bench_reports) > 5:
                    html_content += f'<small style="color: var(--text-muted); padding: 10px;">...and {len(bench_reports) - 5} more benchmarks</small>'

                html_content += '</div>'
            else:
                html_content += '<div class="no-reports">No benchmark reports available</div>'

            # Add timestamp if available
            if platform["metadata"].get("timestamp"):
                html_content += f'<div class="timestamp">Run at {platform["metadata"]["timestamp"]}</div>'

            html_content += """
                    </div>
            """

        html_content += f"""
                </div>

                <footer>
                    <p><strong>About these benchmarks:</strong></p>
                    <p>These benchmarks compare different implementations of finding the minimum value index in large arrays:</p>
                    <ul style="text-align: left; max-width: 800px; margin: 20px auto;">
                        <li><strong>Scalar:</strong> Traditional iterator-based sequential search</li>
                        <li><strong>SIMD:</strong> Vectorized search using Rust's portable_simd with various lane widths</li>
                        <li><strong>Parallel:</strong> Multi-threaded search using Rayon</li>
                        <li><strong>Parallel SIMD:</strong> Combined multi-threading and vectorization</li>
                    </ul>
                    <p style="margin-top: 30px;">
                        <a href="https://github.com/Posnet/argmin-simd">
                            <svg class="icon" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 5px;">
                                <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                            </svg>
                            View Source on GitHub
                        </a>
                    </p>
                </footer>
            </div>
        </body>
        </html>
        """

        # Write the main index file
        with open(PUBLIC_DIR / "index.html", "w") as f:
            f.write(html_content)

        # Generate summary statistics
        total_reports = sum(len(p["reports"]) for p in platforms)
        successful_platforms = sum(1 for p in platforms if p["status"] == "success")

        print(f"Report generation complete:")
        print(f"  - Processed {len(platforms)} platforms")
        print(f"  - Found {total_reports} benchmark reports")
        print(f"  - {successful_platforms}/{len(platforms)} platforms successful")
        print(f"  - Output written to {PUBLIC_DIR.absolute()}")

        # Verify the structure
        print("\nGenerated file structure:")
        for html_file in sorted(PUBLIC_DIR.rglob("*.html"))[:20]:
            print(f"  - {html_file.relative_to(PUBLIC_DIR)}")
        EOF

    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./public

  deploy:
    needs: generate-report
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4